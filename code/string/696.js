// 给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，
// 并且这些子字符串中的所有0和所有1都是组合在一起的。
// 示例 1 :
// 输入: "00110011"
// 输出: 6
// 解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。
// 请注意，一些重复出现的子串要计算它们出现的次数。
// 另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。

// 示例 2 :

// 输入: "10101"
// 输出: 4
// 解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。

// 注意：

// s.length 在1到50,000之间。
// s 只包含“0”或“1”字符。

// export default (s) => {
//     // pre 前一个数字连续出现的次数，cur 当前数字连续出现的次数，result 结果子串个数
//     let pre = 0, cur = 1, result = 0
//     for (let i = 0, len = s.length - 1; i < len; i++) {
//         // 判断当前数字是否与后一个数字相同
//         if (s[i] === s[i + 1]) { // 相同，则当前数字出现的次数cur加1
//             cur++
//         } else { // 不同，则当前数字事实上变成了前一个数字，当前数字的次数重置为1
//             pre = cur
//             cur = 1
//         }
//         if (pre >= cur) { // 前一个数字出现的次数 >= 后一个数字出现的次数，则一定包含满足条件的子串
//             result++
//         }
//     }
//     return result
// }

export default (s) => {
    return s.match(/([1]+)|([0]+)/g).map(item => item.length).reduce((r, i, index, arr) => {
        (index + 1 < arr.length) ? (r += i > arr[index + 1] ? arr[index + 1] : i) : r
        return r
    }, 0)
}
